/**
 * Product Routes Module
 * This module handles all API routes related to products
 */

const express = require('express');
const router = express.Router();
const pool = require('../db'); // Changed db to pool
const fs = require('fs'); // Require fs module to check file existence

/**
 * Enhance product data with additional information
 */
function enhanceProductData(data) {
    if (Array.isArray(data)) {
        return data.map(product => enhanceProductData(product));
    }
    
    // Ensure image path is correct
    if (data.image) {
        // Nếu đường dẫn đã có định dạng đầy đủ thì giữ nguyên
        if (data.image.startsWith('http') || data.image.startsWith('/')) {
            // Không cần xử lý
        } else {
            // Chuyển đường dẫn thành dạng với dấu / ở đầu
            data.image = '/' + data.image;
        }
    } else {
        // Sử dụng hình ảnh mặc định nếu không có
        data.image = '/images/products/default-product.jpg';
    }
    
    // Nếu có mảng images, sử dụng hình ảnh đầu tiên
    if (data.images && Array.isArray(data.images) && data.images.length > 0) {
        if (!data.images[0].startsWith('/')) {
            data.image = '/' + data.images[0];
        } else {
            data.image = data.images[0];
        }
        console.log(`Product ${data.id}: Using first image from images array: ${data.image}`);
    }
    
    // Đảm bảo price là số
    if (typeof data.price === 'string') {
        data.price = parseFloat(data.price);
    }
    
    // Đảm bảo rating là số 
    if (typeof data.rating === 'string') {
        data.rating = parseFloat(data.rating);
    }
    
    return data;
}

/**
 * GET /api/products
 * Get all products with optional filtering
 */
router.get('/', async (req, res) => {
    try {
        const { category, min_price, max_price, seller_id, search } = req.query;
        
        console.log('Đang truy vấn sản phẩm với các tham số:', { category, min_price, max_price, seller_id, search });
        
        // Truy vấn sản phẩm và thông tin seller, sử dụng trường category trong bảng products
        let queryText = `
            SELECT 
                p.*, 
                COALESCE(u.name, 'Unknown') as seller_name
            FROM 
                products p
            LEFT JOIN 
                users u ON p.seller_id = u.id
            WHERE 1=1
        `;
        const params = [];
        let paramIndex = 1;
        
        // Add category filter if provided - dùng trường category trong bảng products
        if (category) {
            queryText += ` AND p.category = $${paramIndex++}`;
            params.push(category);
        }
        
        // Add price range filter if provided
        if (min_price) {
            queryText += ` AND p.price >= $${paramIndex++}`;
            params.push(parseFloat(min_price));
        }
        if (max_price) {
            queryText += ` AND p.price <= $${paramIndex++}`;
            params.push(parseFloat(max_price));
        }
        
        // Add seller filter if provided
        if (seller_id) {
            queryText += ` AND p.seller_id = $${paramIndex++}`;
            params.push(parseInt(seller_id));
        }
        
        // Add search filter if provided
        if (search) {
            queryText += ` AND (p.name ILIKE $${paramIndex++} OR p.description ILIKE $${paramIndex++})`; // Changed LIKE to ILIKE for case-insensitive search
            params.push(`%${search}%`);
            params.push(`%${search}%`);
        }
        
        console.log('Executing query:', queryText);
        console.log('With params:', params);
        
        // Execute the query
        const { rows } = await pool.query(queryText, params);
            
        console.log(`API trả về ${rows.length} sản phẩm`);
        
        // Nâng cao chất lượng dữ liệu sản phẩm với mô tả phong phú
        const enhancedResults = enhanceProductData(rows);
            
        res.json(enhancedResults);
    } catch (error) {
        console.error('Server error:', error);
        res.status(500).json({ error: 'Server error', details: error.message });
    }
});

/**
 * GET /api/products/category/:category
 * Get products by category
 * CHÚ Ý: Route này phải đứng trước route '/:id' để tránh xung đột
 */
router.get('/category/:category', async (req, res) => {
    try {
        const { category } = req.params;
        console.log('Getting products by category:', category);
        
        const queryText = `
            SELECT 
                p.*, 
                COALESCE(u.name, 'Unknown') as seller_name
            FROM 
                products p
            LEFT JOIN 
                users u ON p.seller_id = u.id
            WHERE p.category = $1 
        `;
        
        const { rows } = await pool.query(queryText, [category]);
        console.log(`Found ${rows.length} products in category ${category}`);
        
        // Enhance product descriptions
        const enhancedResults = enhanceProductData(rows);
        
        res.json(enhancedResults);
    } catch (error) {
        console.error('Server error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

/**
 * GET /api/products/:id
 * Get a specific product by ID
 */
router.get('/:id', async (req, res) => {
    try {
        const { id } = req.params;
        console.log('Getting product with ID:', id);
        
        const queryText = `
            SELECT 
                p.*, 
                COALESCE(u.name, 'Unknown') as seller_name
            FROM 
                products p
            LEFT JOIN 
                users u ON p.seller_id = u.id
            WHERE p.id = $1
        `;
        
        console.log('Executing query with params:', [id]);
        const { rows } = await pool.query(queryText, [id]);
        console.log('Query result rows:', rows.length);
        
        if (rows.length === 0) {
            return res.status(404).json({ error: 'Product not found' });
        }
        
        // Xử lý kết quả để đảm bảo các trường đúng định dạng
        let product = rows[0];
        
        console.log('Raw product data:', JSON.stringify(product));
            
        // Nâng cao chất lượng dữ liệu sản phẩm với mô tả phong phú
        const enhancedProduct = enhanceProductData(product);
        
        console.log('Enhanced product data:', JSON.stringify(enhancedProduct));
            
        res.json(enhancedProduct);
    } catch (error) {
        console.error('Server error:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

module.exports = router;
